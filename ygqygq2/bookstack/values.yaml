## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
## @param global.redis.password Global Redis&trade; password (overrides `auth.password`)
##
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
#     - myRegistryKeySecretName

## @section Common parameters

## @param nameOverride String to partially override nginx.fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override nginx.fullname template
##
fullnameOverride: ""
## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
##
kubeVersion: ""
## @param clusterDomain Kubernetes Cluster Domain
##
clusterDomain: cluster.local
## @param extraDeploy Extra objects to deploy (value evaluated as a template)
##
extraDeploy: []
## @param commonLabels Add labels to all the deployed resources
##
commonLabels: {}
## @param commonAnnotations Add annotations to all the deployed resources
##
commonAnnotations: {}

# Default values for yapi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

statefulset:
  enabled: false

## By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25% .
## You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
deploymentStrategy: {}
  # rollingUpdate:
  #   maxSurge: 25%
  #   maxUnavailable: 25%
  # type: RollingUpdate

# 副本个数
replicaCount: 1

# 容器image及tag
image:
  repository: registry.cn-hangzhou.aliyuncs.com/ygqygq2/bookstack
  tag: latest
  pullPolicy: IfNotPresent  # IfNotPresent: 有则不拉（减少流量和操作步骤），Always: 不管tag总拉（适合tag不变时更新）
  imagePullSecrets: []

service:
  type: ClusterIP  # 一般不用修改
  ingressPort: 8181
  ports:
    web:  # 多端口暴露时，复制一段，ingress默认只暴露此名为web的端口
      port: 8181  # Service port number for client-a port.
      protocol: TCP  # Service port protocol for client-a port.

## env set
## ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
## ref: https://www.iminho.me/wiki/docs/bookstack/bookstack-config.md
## BookStack支持的环境变量可参考config中的app.conf，但建议从此处定义env
env:
  - name: BOOKSTACK_DOMAIN
    value: bookstack.utcook.com
  - name: BOOKSTACK_RUN_MODE
    value: prod
  - name: BOOKSTACK_PORT
    value: "8181"

## command set
startCommand: []
#  - "java -Xdebug -Xnoagent -Djava.compiler=NONE"
#  - "-Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=n"
#  - "-Djava.security.egd=file:/dev/urandom"
#  - "-jar /test.jar"
#  - "-Duser.timezone=GMT+08"

## Enable configmap and add data in configmap
config:
  enabled: false
  mountPath: /BookStack/conf/app.conf
  subPath: app.conf
  data:
    app.conf: |-
      # 程序名称
      appname = BookStack

      # 微信小程序 appid
      appId="${BOOKSTACK_APP_ID}"

      # 微信小程序appSecret
      appSecret="${BOOKSTACK_APP_SECRET}"

      # 是否限制API请求，也就是如果不是上述配置的微信小程序的appId请求的接口，则直接拒绝
      limitReferer="${BOOKSTACK_LIMIT_REFERER||false}"

      # API 路由前缀，默认为 bookchat。API访问形式：https://您的域名/bookchat/api/v1/xxx
      # 比如您把api前缀改为了 hello，则您在 BookChat 或者 BookChatApp 中，需要把 config.js 中的 host 常量配置为 https://您的域名/hello
      apiPrefix="${BOOKSTACK_API_PREFIX||bookchat}"

      # 是否显示小程序阅读码（需要配置了appScecret才会生效）
      showWechatCode = "${BOOKSTACK_SHOW_WECHAT_CODE||false}"

      # 比如你将static目录下的所有静态资源都放到了专门的服务器上，那么这个域名就行用来访问你的静态资源的域名。否则建议填写web网站的域名
      # 如果您部署了微信小程序，则该值一定要填写
      static_domain="${BOOKSTACK_STATIC_DOMAIN}"

      # 监听端口
      httpport = "${BOOKSTACK_PORT||8181}"

      # 运行模式。开发时，请设置为开发模式"dev"，即development；部署时，请设置为产品模式"prod"，即product。dev模式下，会打印各种调试信息
      runmode = "${BOOKSTACK_RUN_MODE||dev}"

      # 是否开启session，这个必须开启，否则没法玩了。
      sessionon = true

      # session名称，这个你自己定。
      sessionname = bookstack
      copyrequestbody = true

      # 启动gzip压缩，则设置为true，否则设置为false。建议启动
      EnableGzip=true

      # 要压缩的静态文件扩展名，其中.xml是sitemap站点地图压缩。建议按照这个来就行了
      StaticExtensionsToGzip = .css, .js, .xml

      #站点地图host（主要用于使用CDN的时候，host与实际host不一样，导致生成的sitemap不一样）
      sitemap_host="${BOOKSTACK_DOMAIN}||${BOOKSTACK_STATIC_DOMAIN}"

      # 默认Session生成Key的秘钥
      beegoserversessionkey=bookstack

      ########Session储存方式##############
      #以文件方式储存
      sessionprovider="${BOOKSTACK_SESSION_PROVIDER||file}"
      sessionproviderconfig="${BOOKSTACK_SESSION_PROVIDER_CONFIG||store/session}"

      # 静态目录。这个是站点地图的静态目录
      StaticDir = sitemap:sitemap

      # 站点可直接访问的静态文件【注意，这里千万不能配置.conf文件扩展名，否则会把.conf文件当做静态文件而被外部访问，导致数据库账号密码等泄露。按照默认的来即可】
      StaticExt=.txt,.xml,.ico,.png,.jpg,.jpeg,.gif,.html

      #评论时间间隔，每次发表评论，限定间隔秒数，避免被恶意刷评论
      CommentInterval=10

      # 生成下载文档时导出pdf文档的配置，这里建议把关于bookstack.cn的信息替换成你自己的就行，其他的建议不要动
      exportHeader=<p style='color:#8E8E8E;font-size:12px;'>_SECTION_</p>
      exportFooter=<p style='color:#8E8E8E;font-size:12px;'>本文档使用 <a href='http://www.bookstack.cn' style='text-decoration:none;color:#1abc9c;font-weight:bold;'>书栈(Book
      Stack.CN)</a> 构建 <span style='float:right'>- _PAGENUM_ -</span></p>
      exportFontSize=13
      exportPaperSize=a4
      exportCreator=书栈(BookStack.CN)
      exportMarginLeft=36
      exportMarginRight=36
      exportMarginTop=36
      exportMarginBottom=36

      ####################MySQL 数据库配置###########################
      db_adapter=mysql

      # 您的数据库host
      db_host="${BOOKSTACK_DB_HOST||127.0.0.1}"

      #您的数据库端口
      db_port="${BOOKSTACK_DB_PORT||3306}"

      #您的数据库用户名
      db_username="${BOOKSTACK_DB_USERNAME||root}"

      # 您的数据库密码
      db_password="${BOOKSTACK_DB_PASSWORD||123456}"

      #您使用的数据库
      db_database=bookstack

      # 谷歌浏览器，用于发布内容的时候渲染未被渲染的markdown。建议安装最新版的Chrome浏览器，并把Chrome浏览器加入系统环境变量。
      # 使用Chrome的headless去处理。之前考虑使用phantomjs的，但是phantomjs有些小问题，不如Chrome强大。
      chrome=chromium-browser

      # 如果使用 puppeteer，则忽略chrome
      puppeteer = false

      #项目默认封面
      cover=/static/images/book.png

      #默认头像
      avatar=/static/images/avatar.png

      #默认阅读令牌长度
      token_size=12

      #上传文件的后缀
      upload_file_ext=txt|doc|docx|xls|xlsx|ppt|pptx|pdf|7z|rar|jpg|jpeg|png|gif

      ####################邮件配置######################
      #是否启用邮件
      enable_mail="${BOOKSTACK_ENABLE_MAIL||false}"
      #每小时限制指定邮箱邮件发送次数
      mail_number="${BOOKSTACK_MAIL_NUMBER||5}"
      #smtp服务用户名
      smtp_user_name="${BOOKSTACK_SMTP_USER_NAME||admin@bookstack}"
      #smtp服务器地址
      smtp_host="${BOOKSTACK_SMTP_HOST||smtp.163.com}"
      #smtp密码
      smtp_password="${BOOKSTACK_SMTP_PASSWORD}"
      #端口号
      smtp_port="${BOOKSTACK_SMTP_PORT||25}"
      #发送邮件的显示名称
      form_user_name="${BOOKSTACK_FORM_USERNAME||admin@bookstack}"

      #接收回件的邮箱。留空则表示使用发送邮件的邮箱作为接收回件邮箱
      reply_user_name="${BOOKSTACK_FORM_USERNAME||admin@bookstack}"

      #邮件有效期30分钟
      mail_expired="${BOOKSTACK_EXPIRED||30}"

      # 存储类型，后续扩展成本地存储(local)、阿里云OSS存储(oss)、七牛云存储(qiniu)、腾讯云存储(cos)、百度云存储(bos)和又拍云存储(upyun)
      # 目前可选项：local、oss
      store_type=local

      # 不要修改
      include "oss.conf"
      include "oauth.conf"

## To use an additional secret, set enable to true and add data
secret:
  enabled: false
  mountPath: /etc/secret-volume
  subPath: ""
  readOnly: true
  data: {}

## liveness and readiness
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
healthCheck:
  enabled: true
  type: http  # http/tcp
  port: web  # 上面的端口名或端口
  httpPath: '/'  # http时必须设置
  livenessInitialDelaySeconds: 20  # 初始延迟秒数
  livenessPeriodSeconds: 10  # 检测周期，默认值10，最小为1
  readinessInitialDelaySeconds: 20  # 初始延迟秒数
  readinessPeriodSeconds: 10   # 检测周期，默认值10，最小为1

resources: {}
  # 容器资源设置
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

## Node labels and tolerations for pod assignment
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
### ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
labels: {}
podAnnotations: {}
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistentVolume:   # 是否存储持久化
  enabled: false
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
  ##   Azure, standard on GKE, AWS & OpenStack)
  ##
  storageClass: "-"
  accessMode: ReadWriteOnce
  annotations: {}
  #   helm.sh/resource-policy: keep
  size: 2Gi  # 大小
  existingClaim: {}  # 使用已存在的pvc
  mountPaths:
    - name: data-storage
      mountPath: /bookstack/database
      subPath: database
    - name: data-storage
      mountPath: /bookstack/uploads
      subPath: uploads

ingress:  # 是否使用nginx暴露域名或端口
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  ingressClassName: ""
  path: /
  pathType: ImplementationSpecific
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

mysql:
  # if enabled set "false", fill the connection informations in "external" section
  enabled: true
  external:
    mysqlHost: "mysql_host"
    mysqlDatabase: "bookstack"
    mysqlPort: "3306"
    mysqlUsername: "bookstack"
    mysqlPassword: "bookstack"

  root:
    password: bookstack
    forcePassword: false

  db:
    user: bookstack
    password: bookstack
    name: bookstack
    forcePassword: false

  replication:
    enabled: false
    user: replicator
    password: replicator
    forcePassword: false

  master:
    persistence:
      enabled: false
      storageClass: "-"
      mountPath: /bitnami/mysql
      annotations: {}
      accessModes:
      - ReadWriteOnce
      size: 8Gi

    config: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      default-time_zone = '+8:00'
      character-set-server=utf8mb4
      init-connect='SET NAMES utf8mb4'
      collation-server = utf8mb4_unicode_ci
      max_connections = 5000
      query_cache_type = 1
      query_cache_size = 128M
      query_cache_limit = 4M
      key_buffer_size = 256M
      slow_query_log = 1
      long_query_time = 2
      slow_query_log_file=slow-query.log
      log_warnings = 1

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

  slave:
    replicas: 1
    persistence:
      enabled: false
      storageClass: "-"
      mountPath: /bitnami/mysql
      annotations: {}
      accessModes:
      - ReadWriteOnce
      size: 8Gi

    config: |-
      [mysqld]
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      default-time_zone = '+8:00'
      character-set-server=utf8mb4
      init-connect='SET NAMES utf8mb4'
      collation-server = utf8mb4_unicode_ci
      max_connections = 5000
      query_cache_type = 1
      query_cache_size = 128M
      query_cache_limit = 4M
      key_buffer_size = 256M
      slow_query_log = 1
      long_query_time = 2
      slow_query_log_file=slow-query.log
      log_warnings = 1

      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid

  metrics:
    enabled: false
    image:
      registry: docker.io
      repository: prom/mysqld-exporter
      tag: v0.10.0
      pullPolicy: IfNotPresent
    resources: {}
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9104"

## Uncomment and modify this to run a command after starting the core container.
## ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/bash","/pre-stop.sh"]
  # postStart:
  #   exec:
  #     command: ["/bin/bash","/post-start.sh"]

deployment:
  additionalVolumes: []

## init containers
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## Add init containers. e.g. to be used to give specific permissions for data
## Add your own init container or uncomment and modify the given example.
initContainers: {}
#  - name: fmp-volume-permission
#    image: busybox
#    imagePullPolicy: IfNotPresent
#    command: ['chown','-R', '200', '/extra-data']
#    volumeMounts:
#      - name: extra-data
#        mountPath: /extra-data

additionalContainers: {}
## Additional containers to be added to the core pod.
#  - name: my-sidecar
#    image: nginx:latest
#  - name: lemonldap-ng-controller
#    image: lemonldapng/lemonldap-ng-controller:0.2.0
#    args:
#      - /lemonldap-ng-controller
#      - --alsologtostderr
#      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
#    env:
#      - name: POD_NAME
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.name
#      - name: POD_NAMESPACE
#        valueFrom:
#          fieldRef:
#            fieldPath: metadata.namespace
#    volumeMounts:
#    - name: copy-portal-skins
#      mountPath: /srv/var/lib/lemonldap-ng/portal/skins
